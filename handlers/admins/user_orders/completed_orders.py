from aiogram import Dispatcher
from aiogram.types import Message
from sqlalchemy import and_

from commands.admins import AdminCommands
from filters import AdminFilter
from models import OrderHistory, Users, CartProducts, Products


async def user_orders_completed(message: Message):
    orders: OrderHistory = await OrderHistory.query.where(
        OrderHistory.completed == True
    ).gino.all()
    if not orders:
        return await message.answer('–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!')
    for order in orders:
        users: Users = await Users.query.where(and_(
            Users.tg_id == order.user_id,
            Users.location_latitude == Users.location_latitude,
            Users.location_longitude == Users.location_longitude
        )).gino.all()
        product_name = []
        user_phone = []
        user_phone_number = []
        product_price = []
        order_time = []
        for user in users:
            cart_products: CartProducts = await CartProducts.query.where(
                CartProducts.Id == order.cart_products
            ).gino.all()
            for cart_product in cart_products:
                products: Products = await Products.query.where(
                    Products.Id == cart_product.products_id
                ).gino.all()
                for product in products:
                    location_latitude = map(float, user.location_latitude)
                    location_longitude = map(float, user.location_longitude)
                    order_time.append(f"–î–∞—Ç–∞: {order.order_date}")
                    product_name.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}")
                    product_name.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cart_product.amount}.")
                    user_phone.append(user.phone_number)
                    for i in user_phone:
                        if i not in user_phone_number:
                            user_phone_number.append(i)
                    product_price.append(product.price)
                    price = sum(map(int, product_price * cart_product.amount))
        await message.bot.send_message(message.from_user.id, f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –æ—Ç {order.user_id}!\n\n"
                                                             f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "
                                                             f"<code>{chr(10).join([str(i) for i in user_phone_number])}</code>\n"
                                                             f"\n–ó–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \n\n"
                                                             f"<b>{chr(10).join([str(i) for i in product_name])}</b>\n"
                                                             f"\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{price}</b>—Å—É–º.\n"
                                                             f"\n–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {order_time}"
                                                             f"\nüîª –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: üîª")
    await message.bot.send_location(chat_id=message.from_user.id,
                                    latitude=location_latitude,
                                    longitude=location_longitude)


def register_user_orders_completed_handlers(dp: Dispatcher):
    dp.register_message_handler(
        user_orders_completed, AdminFilter(), text=AdminCommands.order_history_completed.value
    )